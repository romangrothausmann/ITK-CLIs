image: docker:stable

services:
  - docker:dind

before_script:
  - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY

stages:
  - build
  - test
  - release

variables:
  IMAGE_TAG: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG

build:
  stage: build
  tags:
    - multicore
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  script:
    ## 1st stage build
    - docker pull $IMAGE_TAG:system-latest || true
    - docker build --pull
                   --cache-from $IMAGE_TAG:system-latest
                   --tag $IMAGE_TAG:system-latest
                   --target system
                   .
    - docker push $IMAGE_TAG:system-latest
    ## 2nd stage build
    - docker pull $IMAGE_TAG:builder-latest || true
    - docker build --pull
                   --cache-from $IMAGE_TAG:system-latest
                   --cache-from $IMAGE_TAG:builder-latest
                   --tag $IMAGE_TAG:builder-latest
                   --target builder 
                   .
    - docker push $IMAGE_TAG:builder-latest
    ## 3rd stage build
    - docker pull $IMAGE_TAG:test || true
    - docker build --pull
                   --cache-from $IMAGE_TAG:system-latest
                   --cache-from $IMAGE_TAG:builder-latest
                   --cache-from $IMAGE_TAG:test
                   --tag $IMAGE_TAG:test
                   .
    - docker push $IMAGE_TAG:test
  retry: 2

test01:
  stage: test
  variables:
    GIT_STRATEGY: none
  script:
    - docker pull $IMAGE_TAG:test
    - set +o pipefail # essential if return-value of pipe is used to determine job status
    - "docker run --rm
                 $IMAGE_TAG:test
                 file_converter
                 2>&1 | grep 'Missing Parameters'"
  retry: 2

.test: &test
  stage: test
  script:
    - docker pull $IMAGE_TAG:test
    - echo $CMD
    - docker run --rm
                 -v $(pwd):/images
                 $IMAGE_TAG:test
                 /bin/bash -c "$CMD"
    - set +o pipefail # essential if return-value of pipe is used to determine job status
    - 'echo "Expected MD5: $MD5"'
    - '[[ -z $MD5 ]] &&  echo "No MD5 provided" || md5sum output.mha | tee /dev/stderr | grep $MD5'
  retry: 2

.testSDI: &testSDI
  stage: test
  script:
    - docker pull $IMAGE_TAG:test
    - echo $CMD
    - docker run --rm
                 -v $(pwd):/images
                 $IMAGE_TAG:test
                 /bin/bash -c "$CMD"
    - echo $CMDSDI
    - docker run --rm
                 -v $(pwd):/images
                 $IMAGE_TAG:test
                 /bin/bash -c "$CMDSDI"
    - md5sum *.mha | tee md5.out
    - res=$( awk '{print $1}' md5.out | sort -u | wc -l | awk '{print $1}' )
    - echo $res
    - test $res -eq 1
    - set +o pipefail # essential if return-value of pipe is used to determine job status
    - 'echo "Expected MD5: $MD5"'
    - '[[ -z $MD5 ]] &&  echo "No MD5 provided" || md5sum output.mha | tee /dev/stderr | grep $MD5'
  retry: 2

stat:
  <<: *test
  variables:
    CMD: " $CI_JOB_NAME tests/data/ACN_speed.mha "

stat_SDI:
  <<: *test
  variables:
    CMD: "$CI_JOB_NAME tests/data/ACN_speed.mha 10"

thresh-erase:
  <<: *testSDI
  variables:
    CMD:    " /usr/bin/time -v $CI_JOB_NAME       tests/data/ACN_speed.mha output.mha      0  -0.5 +0.5 && stat output.mha      2>/dev/null "
    CMDSDI: " /usr/bin/time -v $CI_JOB_NAME       tests/data/ACN_speed.mha output_SDI.mha 10  -0.5 +0.5 && stat output_SDI.mha  2>/dev/null "
    MD5: 862461122c1d136fd1bd5f776defede4

resample:
  <<: *test
  variables:
    CMD:    " /usr/bin/time -v $CI_JOB_NAME       tests/data/ACN_speed.mha output.mha      0  1  0.5 0.4 0.3 && stat output.mha      2>/dev/null "
    MD5: 50dfc4225256532700ce0a7607048557

sigmoid:
  <<: *testSDI
  variables:
    CMD:    " /usr/bin/time -v $CI_JOB_NAME       tests/data/ACN_speed.mha output.mha      0  2 1 0 100 && stat output.mha      2>/dev/null "
    CMDSDI: " /usr/bin/time -v $CI_JOB_NAME       tests/data/ACN_speed.mha output_SDI.mha 10  2 1 0 100 && stat output_SDI.mha  2>/dev/null "
    MD5: 9b71263aaaf4d7ca0901e5857898244d

min-path_seg_f32.0: # 0: IterateNeighborhoodOptimizer
  <<: *test
  variables: # YAML interprets \r and \n in double quotes! https://stackoverflow.com/questions/24291402/how-to-store-or-read-a-literal-carriage-return-and-newline-from-yaml-in-python#24291536
    CMD: " min-path_seg_f32 tests/data/ACN.mha ACN_mps 0  5.5  0  100 1.1 1.0   v217 v19 v49  v41 v123 v127   v91 v58 v53 |& sed '/progress/d;s/\r/\\n/g' " # \r should be interpreted by YAML \n not!

min-path_seg_f32.1: # 1: GradientDescentOptimizer
  <<: *test
  variables:
    CMD: " min-path_seg_f32 tests/data/ACN.mha ACN_mps 0  5.5  1  100 1.1 1.0   v217 v19 v49  v41 v123 v127   v91 v58 v53 |& sed '/progress/d;s/\r/\\n/g' "

release:
  stage: release
  variables:
    GIT_STRATEGY: none
  script:
    - apk add --update --no-cache curl jq
    - export ms='application/vnd.docker.distribution.manifest.v2+json'
    - export APIURL=$( echo "https://$CI_REGISTRY/v2/$CI_PROJECT_PATH/$CI_COMMIT_REF_SLUG" | tr '[:upper:]' '[:lower:]' )
    - 'export TOKEN=$(
       curl https://gitlab.com/jwt/auth
       -s -f
       -u $GITLAB_USER_LOGIN:$REGISTRY_TOKEN
       --get
       -d client_id=docker
       -d offline_token=true
       -d service=container_registry
       -d "scope=repository:$CI_PROJECT_PATH/$CI_COMMIT_REF_SLUG:*"
       | sed -r "s/(\{\"token\":\"|\"\})//g"
       )'
    - ' curl -fs         -H "Accept: $ms"       -H "Authorization:Bearer $TOKEN"       $APIURL/manifests/test
      | curl -fsS -X PUT -H "Content-type: $ms" -H "Authorization:Bearer $TOKEN" -d @- $APIURL/manifests/latest '
    - ' curl -fs         -H "Accept: $ms"       -H "Authorization:Bearer $TOKEN"       $APIURL/manifests/test
      | curl -fsS -X PUT -H "Content-type: $ms" -H "Authorization:Bearer $TOKEN" -d @- $APIURL/manifests/$CI_COMMIT_SHORT_SHA '
    ## remove old images (keep N) with GIT-SHA tag
    - export URLENC=$( echo $CI_PROJECT_PATH | sed 's|/|%2F|g' ) # https://docs.gitlab.com/ce/api/README.html#namespaced-path-encoding
    - export registryID=$( curl -fs "https://gitlab.com/api/v4/projects/$URLENC/registry/repositories" | jq ".[] | select(.location==\"$IMAGE_TAG\") | .id" ) # https://docs.gitlab.com/ce/api/container_registry.html#list-registry-repositories
    - curl -fs "https://gitlab.com/api/v4/projects/$URLENC/registry/repositories/$registryID/tags" | jq '.[] | .name'
    - 'curl -fs
           --request DELETE
           --data "name_regex=[0-9a-f]{8}"
           --data "keep_n=5"
           --header "PRIVATE-TOKEN: $REGISTRY_TOKEN"
           "https://gitlab.com/api/v4/projects/$URLENC/registry/repositories/$registryID/tags" ' # https://docs.gitlab.com/ce/api/container_registry.html#delete-repository-tags-in-bulk
    - sleep 30
    - curl -fs "https://gitlab.com/api/v4/projects/$URLENC/registry/repositories/$registryID/tags" | jq '.[] | .name'
  only:
    - master
    - ITK-4
