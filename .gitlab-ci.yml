image: docker:stable

services:
  - docker:dind

before_script:
  - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY

stages:
  - build
  - test
  - release

variables:
  IMAGE_TAG: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG

build:
  stage: build
  tags:
    - multicore
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  script:
    ## 1st stage build
    - docker pull $IMAGE_TAG:system-latest || true
    - docker build --pull
                   --cache-from $IMAGE_TAG:system-latest
                   --tag $IMAGE_TAG:system-latest
                   --target system
                   .
    - docker push $IMAGE_TAG:system-latest
    ## 2nd stage build
    - docker pull $IMAGE_TAG:builder-latest || true
    - docker build --pull
                   --cache-from $IMAGE_TAG:system-latest
                   --cache-from $IMAGE_TAG:builder-latest
                   --tag $IMAGE_TAG:builder-latest
                   --target builder 
                   .
    - docker push $IMAGE_TAG:builder-latest
    ## 3rd stage build
    - docker pull $IMAGE_TAG:test || true
    - docker build --pull
                   --cache-from $IMAGE_TAG:system-latest
                   --cache-from $IMAGE_TAG:builder-latest
                   --cache-from $IMAGE_TAG:test
                   --tag $IMAGE_TAG:test
                   .
    - docker push $IMAGE_TAG:test
  retry: 2

test01:
  stage: test
  variables:
    GIT_STRATEGY: none
  script:
    - docker pull $IMAGE_TAG:test
    - set +o pipefail # essential if return-value of pipe is used to determine job status
    - "docker run --rm
                 $IMAGE_TAG:test
                 file_converter
                 2>&1 | grep 'Missing Parameters'"
  retry: 2

.test: &test
  stage: test
  artifacts:
    untracked: true
    expire_in: 1 week
  script:
    - docker pull $IMAGE_TAG:test
    - echo $CMD
    - docker run --rm
                 -v $(pwd):/images
                 $IMAGE_TAG:test
                 /bin/bash -c "$CMD"
    - set +o pipefail # essential if return-value of pipe is used to determine job status
    - 'echo "Expected MD5: $MD5"'
    - '[[ -z $MD5 ]] &&  echo "No MD5 provided" || md5sum output.* | tee /dev/stderr | grep $MD5'
  retry: 2

.testSDI: &testSDI
  stage: test
  artifacts:
    untracked: true
    expire_in: 1 week
  script:
    - docker pull $IMAGE_TAG:test
    - echo $CMD
    - docker run --rm
                 -v $(pwd):/images
                 $IMAGE_TAG:test
                 /bin/bash -c "$CMD"
    - echo $CMDSDI
    - docker run --rm
                 -v $(pwd):/images
                 $IMAGE_TAG:test
                 /bin/bash -c "$CMDSDI"
    - md5sum output* | tee md5.out
    - res=$( awk '{print $1}' md5.out | wc -l ) # check that there are 2 different outputs
    - echo $res
    - test $res -eq 2
    - res=$( awk '{print $1}' md5.out | sort -u | wc -l | awk '{print $1}' ) # check that they have the same MD5
    - echo $res
    - test $res -eq 1
    - set +o pipefail # essential if return-value of pipe is used to determine job status
    - 'echo "Expected MD5: $MD5"'
    - '[[ -z $MD5 ]] &&  echo "No MD5 provided" || md5sum output.* | tee /dev/stderr | grep $MD5'
  retry: 2

stat:
  <<: *test
  variables:
    CMD: " /usr/bin/time -v $CI_JOB_NAME tests/data/ACN_speed.mhd "

stat_SDI:
  <<: *test
  variables:
    CMD: " /usr/bin/time -v stat tests/data/ACN_speed.mhd 10 "

hist:
  <<: *test
  variables:
    CMD: " /usr/bin/time -v $CI_JOB_NAME tests/data/ACN_speed.mhd 10 -2 2 "

hist_SDI:
  <<: *test
  variables:
    CMD: " /usr/bin/time -v hist         tests/data/ACN_speed.mhd 10 -2 2 10 "

thresh-erase:
  <<: *testSDI
  variables:
    CMD:    " /usr/bin/time -v $CI_JOB_NAME       tests/data/ACN_speed.mhd output.mha      0  -0.5 +0.5 && stat output.mha      2>/dev/null "
    CMDSDI: " /usr/bin/time -v $CI_JOB_NAME       tests/data/ACN_speed.mhd output_SDI.mha 10  -0.5 +0.5 && stat output_SDI.mha  2>/dev/null "
    MD5: 862461122c1d136fd1bd5f776defede4

resample-iso.1:
  <<: *testSDI
  variables:
    CMD:    " /usr/bin/time -v resample-iso       tests/data/ACN_speed.mhd output.mha      0  1  0.6 && stat output.mha      2>/dev/null "
    CMDSDI: " /usr/bin/time -v resample-iso       tests/data/ACN_speed.mhd output_SDI.mha 10  1  0.6 && stat output_SDI.mha  2>/dev/null "
    MD5: 2521b066150637d3deae6dc54d7920fc

resample.0:
  <<: *testSDI
  variables:
    CMD:    " /usr/bin/time -v resample       tests/data/ACN_speed.mhd output.mha      0  0  0.5 0.4 0.3 && stat output.mha      2>/dev/null "
    CMDSDI: " /usr/bin/time -v resample       tests/data/ACN_speed.mhd output_SDI.mha 10  0  0.5 0.4 0.3 && stat output_SDI.mha  2>/dev/null "

resample.1:
  <<: *testSDI
  variables:
    CMD:    " /usr/bin/time -v resample       tests/data/ACN_speed.mhd output.mha      0  1  0.5 0.4 0.3 && stat output.mha      2>/dev/null "
    CMDSDI: " /usr/bin/time -v resample       tests/data/ACN_speed.mhd output_SDI.mha 10  1  0.5 0.4 0.3 && stat output_SDI.mha  2>/dev/null "
    MD5: 61d898cb581bdabbf5db9969d1576acf

resample.2:
  <<: *testSDI
  variables:
    CMD:    " /usr/bin/time -v resample       tests/data/ACN_speed.mhd output.mha      0  2  0.5 0.4 0.3 && stat output.mha      2>/dev/null "
    CMDSDI: " /usr/bin/time -v resample       tests/data/ACN_speed.mhd output_SDI.mha 10  2  0.5 0.4 0.3 && stat output_SDI.mha  2>/dev/null "

resample.5:
  <<: *testSDI
  variables:
    CMD:    " /usr/bin/time -v resample       tests/data/ACN_speed.mhd output.mha      0  5  0.5 0.4 0.3 && stat output.mha      2>/dev/null "
    CMDSDI: " /usr/bin/time -v resample       tests/data/ACN_speed.mhd output_SDI.mha 10  5  0.5 0.4 0.3 && stat output_SDI.mha  2>/dev/null "

resample.10:
  <<: *testSDI
  variables:
    CMD:    " /usr/bin/time -v resample       tests/data/ACN_speed.mhd output.mha      0 10  0.5 0.4 0.3 && stat output.mha      2>/dev/null "
    CMDSDI: " /usr/bin/time -v resample       tests/data/ACN_speed.mhd output_SDI.mha 10 10  0.5 0.4 0.3 && stat output_SDI.mha  2>/dev/null "

resample.20:
  <<: *testSDI
  variables:
    CMD:    " /usr/bin/time -v resample       tests/data/ACN_speed.mhd output.mha      0 20  0.5 0.4 0.3 && stat output.mha      2>/dev/null "
    CMDSDI: " /usr/bin/time -v resample       tests/data/ACN_speed.mhd output_SDI.mha 10 20  0.5 0.4 0.3 && stat output_SDI.mha  2>/dev/null "

unfold:
  <<: *testSDI
  variables:
    CMD:    " /usr/bin/time -v $CI_JOB_NAME tests/data/srv_z@02356.mha output.mha      0  1 0 0 0 1 0.00628 && stat output.mha 2>/dev/null "
    CMDSDI: " /usr/bin/time -v $CI_JOB_NAME tests/data/srv_z@02356.mha output_SDI.mha 10  1 0 0 0 1 0.00628 && stat output.mha 2>/dev/null "
    MD5: 932c8feca9c18d21961c658873e74496

unfold.1:
  <<: *testSDI
  variables:
    CMD:    " /usr/bin/time -v unfold tests/data/srv_z@02356.mha output.mha      0  1 1 0 0 1 0.00015 && stat output.mha 2>/dev/null "
    CMDSDI: " /usr/bin/time -v unfold tests/data/srv_z@02356.mha output_SDI.mha 10  1 1 0 0 1 0.00015 && stat output.mha 2>/dev/null "
    MD5: 4ad23e0ceff0066ef34b9b7168624f34

sigmoid:
  <<: *testSDI
  variables:
    CMD:    " /usr/bin/time -v $CI_JOB_NAME       tests/data/ACN_speed.mhd output.mha      0  2 1 0 100 && stat output.mha      2>/dev/null "
    CMDSDI: " /usr/bin/time -v $CI_JOB_NAME       tests/data/ACN_speed.mhd output_SDI.mha 10  2 1 0 100 && stat output_SDI.mha  2>/dev/null "
    MD5: 9b71263aaaf4d7ca0901e5857898244d

tophat:
  <<: *testSDI
  variables:
    CMD:    " /usr/bin/time -v $CI_JOB_NAME       tests/data/ACN_speed.mhd output.mha      0  1 1 && stat output.mha      2>/dev/null "
    CMDSDI: " /usr/bin/time -v $CI_JOB_NAME       tests/data/ACN_speed.mhd output_SDI.mha 10  1 1 && stat output_SDI.mha  2>/dev/null "
    MD5: 6a7594203d2065331368b702abd9aac8

tophat-speed:
  <<: *testSDI
  variables:
    CMD:    " /usr/bin/time -v $CI_JOB_NAME       tests/data/ACN_speed.mhd output.mha      0  0.005 -1 && stat output.mha      2>/dev/null "
    CMDSDI: " /usr/bin/time -v $CI_JOB_NAME       tests/data/ACN_speed.mhd output_SDI.mha 10  0.005 -1 && stat output_SDI.mha  2>/dev/null "
    MD5: b60d10e8eec163933792969d9f20e0a3

min-path_seg_f32.0: # 0: IterateNeighborhoodOptimizer
  <<: *test
  variables: # YAML interprets \r and \n in double quotes! https://stackoverflow.com/questions/24291402/how-to-store-or-read-a-literal-carriage-return-and-newline-from-yaml-in-python#24291536
    CMD: " min-path_seg_f32 tests/data/ACN.mha ACN_mps 0  5.5  0  100 1.1 1.0   v217 v19 v49  v41 v123 v127   v91 v58 v53 |& sed '/progress/d;s/\r/\\n/g' " # \r should be interpreted by YAML \n not!

min-path_seg_f32.1: # 1: GradientDescentOptimizer
  <<: *test
  variables:
    CMD: " min-path_seg_f32 tests/data/ACN.mha ACN_mps 0  5.5  1  100 1.1 1.0   v217 v19 v49  v41 v123 v127   v91 v58 v53 |& sed '/progress/d;s/\r/\\n/g' "

shift-scale_ROI:
  <<: *test
  variables:
    CMD: " $CI_JOB_NAME tests/data/ACN_speed.mhd output.mha  1.0 1.0  0 0 0  217 202 137 && stat output.mha 2>/dev/null"
    MD5: 90c399cf4601125e8518589fff9394d3

fast-marching_f32:
  <<: *test
  variables:
    CMD: " $CI_JOB_NAME tests/data/ACN.mha output.mha 0 50 200 tests/data/seed.mha && stat output.mha 2>/dev/null"
    MD5: 8284c3219baac898d4f63f1a02d9a651

fast-marching_f32.p:
  <<: *test
  variables:
    CMD: " fast-marching_f32 tests/data/ACN.mha output.mha 0 50 200  p272 p534.3 p267.7 && stat output.mha 2>/dev/null"
    MD5: 8284c3219baac898d4f63f1a02d9a651

fast-marching_f32.1:
  <<: *test
  variables:
    CMD: " fast-marching_f32 tests/data/ACN.mha output.mha 0 50 200  v038 v129 v136 && stat output.mha 2>/dev/null"
    MD5: 8284c3219baac898d4f63f1a02d9a651

fast-marching_f32.2:
  <<: *test
  variables:
    CMD: " fast-marching_f32 tests/data/ACN.mha output.mha 0 50 200  v038 v129 v136  v216 v000 v020 && stat output.mha 2>/dev/null"
    MD5: ba0d86fda4310c84a33adaa2805ad1d4

probeCoords:
  <<: *test
  variables:
    CMD: " /usr/bin/time -v $CI_JOB_NAME tests/data/seed.mha  v38 v129 v136   v39 v129 v136  v38 v129 v137  p271.962 p534.307 p268 "

slice:
  <<: *testSDI
  variables:
    CMD:    " /usr/bin/time -v $CI_JOB_NAME tests/data/ACN_speed.mhd output.mha      0  z 70 && stat output.mha      2>/dev/null "
    CMDSDI: " /usr/bin/time -v $CI_JOB_NAME tests/data/ACN_speed.mhd output_SDI.mha 10  z 70 && stat output_SDI.mha  2>/dev/null "
    MD5: 3afb3c8b48582a89db03d0f5bc210fa9

slice.1:
  <<: *testSDI
  variables:
    CMD:    " /usr/bin/time -v slice     tests/data/mosaic-color.mhd output.png      0  z 70 "
    CMDSDI: " /usr/bin/time -v slice     tests/data/mosaic-color.mhd output_SDI.png 10  z 70 "
    MD5: 611920c5288f7f63f458811ef1344c27

anisoDiff-curv_f32:
  <<: *test
  variables:
    CMD: " /usr/bin/time -v $CI_JOB_NAME tests/data/ACN_speed.mhd output.mha 0  2 0.0207 0.2 && stat output.mha 2>/dev/null "
    MD5: 4c22cbca3e8640a70af91d8a4d94915f

anisoDiff-grad_f32:
  <<: *test
  variables:
    CMD: " /usr/bin/time -v $CI_JOB_NAME tests/data/ACN_speed.mhd output.mha 0  2 0.0207 0.2 && stat output.mha 2>/dev/null "
    MD5: 5c6b06013982d5aae5bce82e55f600b5

anisoDiff-LBR_f32:
  <<: *test
  variables:
    CMD: " /usr/bin/time -v $CI_JOB_NAME tests/data/ACN_speed.mhd output.mha 0  5 0.0001 cCED 3 4 1.5 && stat output.mha 2>/dev/null "
    MD5: 3997b6db3f16bb712deba4c0caaf7d50

## would need nvidia-docker and gitlab runner with access to a GPU    
# anisoDiff-grad_GPU_f32:
#   <<: *test
#   variables:
#     CMD: " /usr/bin/time -v $CI_JOB_NAME tests/data/ACN_speed.mhd output.mha 0  2 0.0207 0.2 && stat output.mha 2>/dev/null "
#     MD5: 5c6b06013982d5aae5bce82e55f600b5

anisoDiff-grad_f32.vec:
  <<: *test
  variables:
    CMD: " /usr/bin/time -v anisoDiff-grad_f32 tests/data/mosaic-color.mhd output.mha 0  2 0.0236 0.2 "
    MD5: 997a244f4384520eb8366fc98818afcb

gradient_mag_vec_f32:
  <<: *test
  variables:
    CMD: " /usr/bin/time -v $CI_JOB_NAME tests/data/mosaic-color.mhd output.mha 0  0 && stat output.mha 2>/dev/null "
    MD5: 6839ee4005d8369ab75ce73d5d75b5d3

project:
  <<: *test
  variables:
    CMD: " /usr/bin/time -v $CI_JOB_NAME tests/data/ACN_speed.mhd output.mha 0  0 2 && stat output.mha 2>/dev/null "
    MD5: 53c0ae5fd2aa1bb8198734007d40aacb

slic_UI32:
  <<: *testSDI
  variables:
    CMD:    " /usr/bin/time -v $CI_JOB_NAME tests/data/mosaic-color.mhd output.mha      0  50 0 && stat output.mha 2>/dev/null "
    CMDSDI: " /usr/bin/time -v $CI_JOB_NAME tests/data/mosaic-color.mhd output_SDI.mha 10  50 0 && stat output.mha 2>/dev/null "
    MD5: 97d0bc733a7f8d57192c3fead873bb3d

DM3:
  <<: *test
  variables:
    CMD: " /usr/bin/time -v file_converter tests/data/test.dm3 output.mha  0 "
    MD5: dae96ec43b1b29838837f9888a142f05


release:
  stage: release
  variables:
    GIT_STRATEGY: none
  dependencies: []
  script:
    - apk add --update --no-cache curl jq
    - export ms='application/vnd.docker.distribution.manifest.v2+json'
    - export APIURL=$( echo "https://$CI_REGISTRY/v2/$CI_PROJECT_PATH/$CI_COMMIT_REF_SLUG" | tr '[:upper:]' '[:lower:]' )
    - 'export TOKEN=$(
       curl https://gitlab.com/jwt/auth
       -s -f
       -u $GITLAB_USER_LOGIN:$REGISTRY_TOKEN
       --get
       -d client_id=docker
       -d offline_token=true
       -d service=container_registry
       -d "scope=repository:$CI_PROJECT_PATH/$CI_COMMIT_REF_SLUG:*"
       | sed -r "s/(\{\"token\":\"|\"\})//g"
       )'
    - ' curl -fs         -H "Accept: $ms"       -H "Authorization:Bearer $TOKEN"       $APIURL/manifests/test
      | curl -fsS -X PUT -H "Content-type: $ms" -H "Authorization:Bearer $TOKEN" -d @- $APIURL/manifests/latest '
    - ' curl -fs         -H "Accept: $ms"       -H "Authorization:Bearer $TOKEN"       $APIURL/manifests/test
      | curl -fsS -X PUT -H "Content-type: $ms" -H "Authorization:Bearer $TOKEN" -d @- $APIURL/manifests/$CI_COMMIT_SHORT_SHA '
    ## remove old images (keep N) with GIT-SHA tag
    - export URLENC=$( echo $CI_PROJECT_PATH | sed 's|/|%2F|g' ) # https://docs.gitlab.com/ce/api/README.html#namespaced-path-encoding
    - export registryID=$( curl -fs "https://gitlab.com/api/v4/projects/$URLENC/registry/repositories" | jq ".[] | select(.location==\"$IMAGE_TAG\") | .id" ) # https://docs.gitlab.com/ce/api/container_registry.html#list-registry-repositories
    - curl -fs "https://gitlab.com/api/v4/projects/$URLENC/registry/repositories/$registryID/tags" | jq '.[] | .name'
    - 'curl -fs
           --request DELETE
           --data "name_regex=[0-9a-f]{8}"
           --data "keep_n=5"
           --header "PRIVATE-TOKEN: $REGISTRY_TOKEN"
           "https://gitlab.com/api/v4/projects/$URLENC/registry/repositories/$registryID/tags" ' # https://docs.gitlab.com/ce/api/container_registry.html#delete-repository-tags-in-bulk
    - sleep 30
    - curl -fs "https://gitlab.com/api/v4/projects/$URLENC/registry/repositories/$registryID/tags" | jq '.[] | .name'
